#!/usr/bin/env ruby

# TODO: Find why do I need that?
$LOAD_PATH.unshift(File.expand_path("#{__dir__}/../lib"))

# Make it easy to debug
require 'byebug'

# Get all options from CLI
require 'ruby_neural_nets/options'
options = RubyNeuralNets::Options.new
options.parse_cli

# Set debug mode for Logger
require 'ruby_neural_nets/logger'
RubyNeuralNets::Logger.debug_mode = options[:debug]

require 'numo/gnuplot'
require 'numo/linalg/linalg'
require 'numo/narray'
# Load a C extension for efficient computations
# Comment out the following line if no backend is to be used
Numo::Linalg::Loader.load_openblas(RUBY_PLATFORM == 'x86_64-linux' ? '/usr/lib/x86_64-linux-gnu/' : "#{ENV['XAEON_ROOT']}/Env/Windows/Libraries/OpenBLAS-0.3.30-x64/bin")

require 'ruby_neural_nets/helpers'
RubyNeuralNets::Helpers.init(
  model_seed: options[:model_seed],
  instability_checks: options[:instability_checks]
)

# Create the progress tracker for all experiments
require 'ruby_neural_nets/progress_tracker'
progress_tracker = RubyNeuralNets::ProgressTracker.new(display_graphs: true)

# Return a unique experiment id, taking into account previously instantiated experiments
#
# Parameters::
# * *experiment_id* (String): Wishful experiment id
# * *experiments* (Array<Experiment>): Existing experiments
# Result::
# * String: Unique experiment id
def unique_experiment_id(experiment_id, experiments)
  exp_id_candidate = experiment_id
  exp_id_idx = 0
  while experiments.find { |select_exp| select_exp.exp_id == exp_id_candidate }
    exp_id_candidate = "#{experiment_id}_#{exp_id_idx}"
    exp_id_idx += 1
  end
  exp_id_candidate
end

# Instantiate all experiments
require 'ruby_neural_nets/experiment'
require 'ruby_neural_nets/gradient_checker'
require 'ruby_neural_nets/profiler'
experiments = []
options.experiments.each do |exp_info|
  exp_info[:training_times][:value].times.each do |train_idx|
    # Load data from the dataset
    data_loader = options.instantiate(exp_info[:data_loader])
    dataset_training = data_loader.dataset(:training)

    # Display some stats
    puts "===== Preparing experiment #{exp_info[:exp_id][:value]}:"
    labels = data_loader.labels
    data_loader.display_stats
    # data_loader.display_sample(:training, labels.first)
    image_stats = data_loader.image_stats
    puts "Images size: #{image_stats[:rows]} x #{image_stats[:cols]} x #{image_stats[:channels]}"
    puts

    # Create the model
    model = options.instantiate(exp_info[:model], image_stats[:rows], image_stats[:cols], image_stats[:channels], labels.size)

    # Define the accuracy measure and loss
    accuracy = options.instantiate(exp_info[:accuracy])
    loss = options.instantiate(exp_info[:loss])

    optimizer = options.instantiate(exp_info[:optimizer])
    optimizer.teach_parameters(model.parameters)
    nbr_epochs = exp_info[:nbr_epochs][:value]
    gradient_checker = RubyNeuralNets::GradientChecker.new(gradient_checks: exp_info[:gradient_checks][:value])
    gradient_checker.link_to_model(model, loss)
    profiler = RubyNeuralNets::Profiler.new(profiling: exp_info[:profiling][:value])

    # Create the experiment
    experiments << RubyNeuralNets::Experiment.new(
      exp_id: unique_experiment_id("#{exp_info[:exp_id][:value]}_training", experiments),
      dataset: dataset_training,
      training_mode: true,
      accuracy:,
      data_loader:,
      loss:,
      model:,
      optimizer:,
      nbr_epochs: ,
      gradient_checker:,
      profiler:,
      display_units: exp_info[:track_layer][:value].to_h
    )

    if exp_info[:eval_dev][:value]
      experiments << RubyNeuralNets::Experiment.new(
        exp_id: unique_experiment_id("#{exp_info[:exp_id][:value]}_dev", experiments),
        dataset: data_loader.dataset(:dev),
        training_mode: false,
        accuracy:,
        data_loader:,
        loss:,
        model:,
        optimizer:,
        nbr_epochs: ,
        gradient_checker:,
        profiler:,
        display_units: {}
      )
    end
  end
end

# Track the progress of all experiments
experiments.each { |experiment| progress_tracker.track(experiment) }

require 'ruby_neural_nets/trainer'
RubyNeuralNets::Trainer.new(progress_tracker:).train(experiments)

# Close graphs
progress_tracker.close_graphs
